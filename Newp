from pyspark.sql import SparkSession
from pyspark.sql.functions import udf, col, count, desc, row_number
from pyspark.sql.types import IntegerType, StringType
from pyspark.sql.window import Window

# Create SparkSession
spark = SparkSession.builder.appName("MoviesAnalysis").getOrCreate()

# Load Datasets
movies_path = "/path/to/movies.csv"
ratings_path = "/path/to/ratings.csv"

movies_df = spark.read.csv(movies_path, header=True, inferSchema=True)
ratings_df = spark.read.csv(ratings_path, header=True, inferSchema=True)

# Define a UDF to extract year from the movie title
def extract_year(title):
    try:
        return int(title.strip()[-5:-1])  # Extract year from title like 'Toy Story (1995)'
    except:
        return None

extract_year_udf = udf(extract_year, IntegerType())

# Add year column to movies DataFrame
movies_with_year_df = movies_df.withColumn("year", extract_year_udf(col("title")))

# Filter movies between 2001 and 2010
movies_filtered_df = movies_with_year_df.filter((col("year") >= 2001) & (col("year") <= 2010))

# Join movies with ratings
movies_ratings_df = movies_filtered_df.join(ratings_df, "movieId")

# Calculate total ratings for each movie
movies_ratings_count_df = movies_ratings_df.groupBy("movieId", "title", "year").agg(count("rating").alias("total_ratings"))

# Find the movie with the maximum ratings for each year
window_spec = Window.partitionBy("year").orderBy(desc("total_ratings"))
movies_ranked_df = movies_ratings_count_df.withColumn("rank", row_number().over(window_spec))
top_movies_per_year_df = movies_ranked_df.filter(col("rank") == 1).select("year", "movieId", "title", "total_ratings")

# Arrange the data in ascending order of year
top_movies_sorted_df = top_movies_per_year_df.orderBy("year")

# Save the output as a single pipe-separated CSV file
output_path = "/path/to/output/directory"
top_movies_sorted_df.write.option("header", "true").option("delimiter", "|").mode("overwrite").csv(output_path)

# Show the result (optional)
top_movies_sorted_df.show()
